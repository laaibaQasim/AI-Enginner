# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AdZ2ncOcg0N04FV00VxALAgO5xOH8FtT
"""

!pip install pandas

import pandas as pd

# load data from csv
df = pd.read_csv('name.csv', index_col="Word")

# ðŸ”¹ Important Parameters:
# filepath_or_buffer: Path to the file or a URL.

# sep: Delimiter to use (default is ','). Use '\t' for TSV files.

# index_col: Column(s) to set as index.

# usecols: Limit which columns to load.

# dtype: Set data types for columns.

# nrows: Number of rows to read.

# skiprows: Skip rows at the beginning.

# na_values: Specify custom missing values.

# parse_dates: Convert columns to datetime.

# other formats
df = pd.read_excel('file.xlsx', sheet_name='Sheet1', index_col=0)
df = pd.read_json('data.json', orient='records')
df = pd.read_sql('SELECT * FROM users', con=connection)
tables = pd.read_html('https://example.com', match="")

"""<!-- without indexing -->"""

# without indexing
df = pd.read_csv("words.csv")
print(df[df["Word"] == "Synergy"])

# with indexing
df = pd.read_csv("words.csv", index_col="Word")
print(df.loc["Synergy"])

# following this yt tutorial: https://www.youtube.com/watch?v=gtjxAH8uaP0

# working with eng words
# how many elements does this frame has?
df.shape
df.info()

# what is the value of a word 'abcd'
df.loc['abcd', "Value"]

# highest value of a word
df["Value"].max()
# or
df.describe() # it will give some info along with max value in df

# which word has a char count of 7 and a value of 87
df.loc[df['char count']== 7 & df['Value'] == 87]

# how to sort
df.sort_values(by=['Values'], ascending=False)

# most common value
df['Value'].values_count().head()

# shortest word with value 274
df.loc[df['Value'] == 274, ['character count']].min()

# query equivalent of above
df.query("Value == 274").sort_values(by="character count")
avg = 1234
df.query("`character count` == @avg")

# df returns records like rows and columns while df.loc is for getting row based on index or some boolean mask

# filtering and sorting pokemon data
# which one is most powerful fire-type pokemon
df.loc[df["Type 1"] == "Fire" | df["Type 2"] == "Fire", 'Total'].sort_values(ascending=False).head(1)

# handle missing data
df.isnull().sum()
df.dropna()
df.fillna(0)